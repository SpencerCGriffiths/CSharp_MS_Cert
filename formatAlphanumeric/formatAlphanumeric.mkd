# Investigate String Formatting Basics

## Composit Formatting

uses numbered placeholders within a string. At runtime everything inside the braces is resolved to a value that is also passed in based on their position. 

e.g.: 
```csharp
string first = "Hello";
string second = "World";
string result = string.Format("{0} {1}!", first, second);
Console.WriteLine(result);
```

### Output: 
Hello World!

e.g.
```csharp
Console.WriteLine("{0} {0} {0}!", first, second);
```

### Output: 
Hello Hello Hello!

## String Interpolation

Rather than using numbered variables you can include variable name: 

```csharp
string first = "Hello";
string second = "World";
Console.WriteLine($"{first} {second}!");
```
### Output: 
Hello World!


## Formatting Currency

composite formatting and string interpolation can be used to format values for display. 

:c - currency format specifier (this will set the currency to the local currency of the machine i.e. "English- United States" languge setting gives $ whereas "French" = eurosymbol )

```csharp
decimal price = 123.45m;
int discount = 50;
Console.WriteLine($"Price: {price:C} (Save {discount:C})");
```

### Output: 
Price: $123.45 (Save $50.00)

#### making code work regardless of country/region = localisation (or globalisation)


## Formatting Numbers:

N numeric format specifier makes numbers more readable by breaking them with commas etc. 

N naturally only gives 2 decimals- to increase you can add criteria after the N. 

e.g

```csharp
decimal measurement = 123456.78912m;
Console.WriteLine($"Measurement: {measurement:N} units");
```
### Output: 
Measurement: 123,456.79 units

e.g
```csharp
decimal measurement = 123456.78912m;
Console.WriteLine($"Measurement: {measurement:N4} units");
```
### Output: 
Measurement: 123,456.7891 units


## Formatting Percentages: 

P- formats percentages. Adding a number afterwards controls th decimal places. 

```csharp
decimal tax = .36785m;
Console.WriteLine($"Tax rate: {tax:P2}");
```

### Output: 
Tax rate: 36.79 %

## These can be combined
e.g: 

```csharp
decimal price = 67.55m;
decimal salePrice = 59.99m;

string yourDiscount = String.Format("You saved {0:C2} off the regular {1:C2} price. ", (price - salePrice), price);

Console.WriteLine(yourDiscount);
```

### Output: 
You saved $7.56 off the regular $67.55 price.

# Challenge - Explore String interpolation

## Display invoice nmber using string interp. 


```csharp
int invoiceNumber = 1201;
decimal productShares = 25.4568m;
decimal subtotal = 2750.00m;
decimal taxPercentage = .15825m;
decimal total = 3185.19m;

Console.WriteLine($"Invoice Number: {invoiceNumber}");
```
### Output:
Invoice Number: 1201

## Display the product shares with one thousandth of a share precision

```csharp
int invoiceNumber = 1201;
decimal productShares = 25.4568m;
decimal subtotal = 2750.00m;
decimal taxPercentage = .15825m;
decimal total = 3185.19m;

Console.WriteLine($"Invoice Number: {invoiceNumber}");

//
Console.WriteLine($"   Shares: {productShares:N3} Product");
```
### Output: 
Invoice Number: 1201
   Shares: 25.457 Product

## Display subtotal that you charge the customer formatted as currency

```csharp
int invoiceNumber = 1201;
decimal productShares = 25.4568m;
decimal subtotal = 2750.00m;
decimal taxPercentage = .15825m;
decimal total = 3185.19m;

Console.WriteLine($"Invoice Number: {invoiceNumber}");

//
Console.WriteLine($"   Shares: {productShares:N3} Product");

//
Console.WriteLine($"     Sub Total: {subtotal:C}");
```

### Output: 
Invoice Number: 1201
Shares: 25.457 Product
    Sub Total: $2,750.00

## Display tax charged on the sale as a percentage


```csharp
int invoiceNumber = 1201;
decimal productShares = 25.4568m;
decimal subtotal = 2750.00m;
decimal taxPercentage = .15825m;
decimal total = 3185.19m;

Console.WriteLine($"Invoice Number: {invoiceNumber}");

//
Console.WriteLine($"   Shares: {productShares:N3} Product");

//
Console.WriteLine($"     Sub Total: {subtotal:C}");

//
Console.WriteLine($"           Tax: {taxPercentage:P2}");
```
### Output: 
Invoice Number: 1201
Shares: 25.457 Product
    Sub Total: $2,750.00
        Tax: 15.83 %

## Finalise the receipt: 

```csharp
int invoiceNumber = 1201;
decimal productShares = 25.4568m;
decimal subtotal = 2750.00m;
decimal taxPercentage = .15825m;
decimal total = 3185.19m;

Console.WriteLine($"Invoice Number: {invoiceNumber}");

//
Console.WriteLine($"   Shares: {productShares:N3} Product");

//
Console.WriteLine($"     Sub Total: {subtotal:C}");

//
Console.WriteLine($"           Tax: {taxPercentage:P2}");

//
Console.WriteLine($"     Total Billed: {total:C}");
```
### Output: 
Invoice Number: 1201
   Shares: 25.457 Product
     Sub Total: $2,750.00
           Tax: 15.83%
     Total Billed: $3,185.19

## Discover Padding and Alignment

### Built in methods for string and any literal string or variable of type string: 
1. PadLeft(), PadRight() - add blank spaces for formatting purposes.
2. Trim(), TrimStart(), TrimEnd(), GetHashcode(), Length - compare two strings or facilitate comparison.
3. Contains(), StartsWith(), EndsWith(), Substring() - help determine what's inside a string, or retrieve part.
4. Replace(), Insert(), Remove() - Change the content. 
5. Split(), ToCharArray()- turning a string into an array of strings or characters.

## Padding with White Space: 
e.g. 
PadLeft({the total number of characters for the line})

```csharp
 string input = "Pad this";
 Console.WriteLine(input.PadLeft(12));
```
### Output: 
 	Pad this

## Overloaded Method: 

another version of a method with different or extra parameters: 

PadLeft({length of line in char}, {char instead of space to fill the space})

e.g
```csharp
 Console.WriteLine(input.PadLeft(12, '-'));
 Console.WriteLine(input.PadRight(12, '-'));
```

### Output: 
 ----Pad this
 Pad this----

```csharp
 string paymentId = "769C";
 string payeeName = "Mr. Stephen Ortega";
 string paymentAmount = "$5,000.00";

 var formattedLine = paymentId.PadRight(6);
 formattedLine += payeeName.PadRight(24);
 formattedLine += paymentAmount.PadLeft(10);

 Console.WriteLine("1234567890123456789012345678901234567890");
 Console.WriteLine(formattedLine);
```

 ### Output: 
  1234567890123456789012345678901234567890
 769C  Mr. Stephen Ortega       $5,000.00


## Apply String Interpolation to a form letter

```csharp
string customerName = "Ms. Barros";

string currentProduct = "Magic Yield";
int currentShares = 2975000;
decimal currentReturn = 0.1275m;
decimal currentProfit = 55000000.0m;

string newProduct = "Glorious Future";
decimal newReturn = 0.13125m;
decimal newProfit = 63000000.0m;


string resultMessage = $"Dear {customerName}, \nAs a customer of our {currentProduct} offering we are excited to tell you about a new financial product that would dramatically increase your return. \n\nCurrently, you own {currentShares:N2} shares at a retun of {currentReturn:P2}. \n\nOur new product, {newProduct} offers a return of {newReturn:P2}. Given your current volume, your potenital profit would be {newProfit:C}. \n\nHere's a quick comparison: \n\n";

resultMessage += $"{currentProduct.PadRight(20)} {currentReturn.ToString("P2").PadRight(9)} {currentProfit:C2}";
resultMessage += "\n";
resultMessage += $"{newProduct.PadRight(20)} {newReturn.ToString("P2").PadRight(9)} {newProfit:C2}";

Console.WriteLine(resultMessage);
```

### Output:  
Dear Ms. Barros,
As a customer of our Magic Yield offering we are excited to tell you about a new financial product that would dramatically increase your return.

Currently, you own 2,975,000.00 shares at a return of 12.75%.

Our new product, Glorious Future offers a return of 13.13%.  Given your current volume, your potential profit would be Â¤63,000,000.00.

Here's a quick comparison:

Magic Yield         12.75%   $55,000,000.00      
Glorious Future     13.13%   $63,000,000.00 
